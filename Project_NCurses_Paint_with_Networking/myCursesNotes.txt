// =============================================================================
// File: myNcursesNotes.txt
// =============================================================================
//
// Routines to Add/Add To From Man Pages:
//     **attron()**     -- Several advanced functions
//     **getch** 	-- keypad return values (over a dozen), and other
//     	     		   user input values
//     **start_color()**-- more information from color functions if needed		
//	  
//
// Notes:
//     - Routines that return pointers always return NULL on error.
//     - initscr and newterm may be macros
//     - Initally, whether the terminal returns 7 or 8 significant bits on
//       input depends on the control mode of the tty driver. To force 8 bits 
//	 to be returned, invoke meta(win, TRUE);  It is equivalent, under
//	 POSIX, to setting the CS7 flag on the terminal.  The window argument,
//	 win, is always ignored.  If the terminfo capabilities smm (meta_on) 
//	 and rmm (meta_off) are defined for the terminal, smm is sent to the
//	 terminal when meta(win, TRUE) is called and rmm is sent when 
//	 meta(win,FALSE) is called.
//     - There is just one put queue for all windows.
//     - functions with a "mv" prefix first perform a cursor movement using
//       wmove, and return an error if hte position is outside the window,
//	 or if the window pointer is null.
//     - when using getch, wgetch, mvgetch, or mvwgetch, nocbreak() and
//       echo() should not be used at the same time.  It may produce
//	 undesirable results.
//     - Curses keeps two data structures representing the terminal screen:
//       a physical screen, which describes what is actually on the screen,
//	 and a virtual screen, describing what the programmer wants to have on
//	 the screen.
//     - In order to output several windows at once, a series of calls to 
//       wrefresh() results in alternating calls to wnoutrefresh and doupdate,
//	 creating multiple outputs to the screen.
//     - All "attr" routines maniuplate the current attributes of the named
//       window.  The "current attributes" apply to all characters that are
//	 written into the window with waddch, waddstr and wprintw.  Attributes
//	 are a property of the character, and move with the character through
//	 any scrolling and insert/delete line/character operations.  They are 
//	 displayed as appropriate modifications to the graphic rendition of 
//	 characters put on the screen to the extent possible.
//
// Common Routines:
//     - addch()
//     - initscr()
//     - start_color()
//     - init_pair()
//     - box()
//     - getyx();
//     - raw()
//     - printw()
//     - endwin()
//     - cbreak()
//     - getch()
//     - refresh()
//     - move()
//     - attron()
//     - newwin()
//     - clear()
//     - endwin()
//     - box()
//
// Attributes Defined in <curses.h>:
//     - A_NORMAL     	           Normal display(no highlight)
//     - A_STANDOUT	 	   Best highlighting mode of the terminal.
//     - A_UNDERLINE 	           Underlining
//     - A_REVERSE		   Reverse video
//     - A_BLINK	 	   Blinking
//     - A_DIM			   Half bright
//     - A_BOLD			   Extra bright or bold
//     - A_PROTECT	       	   Protected mode
//     - A_INVIS	 	   Invisible or blank mode
//     - A_ALTCHARSET 	 	   Alternate character set
//     - A_CHARTEXT	 	   Bit-mask to extract a character
//     - COLOR_PAIR(n)	 	   Color-pair number n
//     - PAIR_NUMBER(attrs) 	   The reverse of COLOR_PAIR(n) (a macro as well)
//     Note - These use the bit operator "or" "|" to combine their attributes.
//
// Defined Colors:
//     - COLOR_BLACK
//     - COLOR_RED
//     - COLOR_GREEN
//     - COLOR_YELLOW
//     - COLOR_BLUE
//     - COLOR_MAGENTA
//     - COLOR_CYAN
//     - COLOR_WHITE
//
// ==== GENERAL SETUP =========================================================
//
// ============================================================================
// 
//     initscr();
//         - (WINDOW *initscr(void))
//	   - Determines the terminal type and initializes all curses data
//	     structures.  The first call also clears the screen.  If there is
//	     any error, initscr will will an error message. A pointer is
//	     returned to stdscr.
//
//     endwin()
//         - should always be called before exiting or escaping from curses 
//	     mode temporarily.
//	   - Restores tty modes, moves cursor to lower left hand corner of
//	     the screen, resets terminal into "proper" non-visual mode.
//	   - calling refresh() or doupdate() after a temporary escape will
//	     cause the program to resume visual mode.
//	   - returns integer ERR if fails, returns OK if success
//
//     isendwin()
//         - returns true if endwin() has been claled without any subsequent
//	     calls to refersh, false otherwise.
//
//     set_term()
//         - used to switch between different terminals.
//	   - screen reference "new" becomes the new current terminal
//	   - previous terminal is returned by the routine
//	   - set_term() is the only routine that maninpulates SCREEN pointers,
//	     all other routines affect only the current terminal
//
//     delscreen()
//         - frees storage associated with the SCREEN data structure 
//	     (endwin() does not do this).
//	   - this routine should be called after endwin if a particular screen
//	     is no longer needed.
//
// ==== INPUT =================================================================
//
// ============================================================================
//
//     int cbreak(void)
//         - disables line buffering and erase/kill character-processing,
//	     making characters typed by the user immediately available to the
//	     program. (interrupt and flow control characters are unaffected)
//	   - a program should call cbreak or nocbreak explicitly
//	   - cbreak overrides raw
//	   - 
//
//     int nocbreak(void)
//         - returns the terminal to normal (cooked) mode
//
//
//     int echo(void)
//         - control whether characters typed by the user are echoed by getch()
//	     as they are typed.
//	   - echoing by the tty driver is always disabled
//	   - 
//
//     int noecho(void)
//         - disables echoing
//
//     int halfdelay(int tenths)
//         - used for half-delay mode
//	   - similar to cbreak() where characters typed by the user are 
//	     immediately available to the program.
//	   - different by ERR is returned if nothing has been typed for
//	     tenths of seconds.
//	   - The value of tenths must be between 1 and 255
//	   - use nocbreak to leave half-delay mode off
//
//     int getch(void), int wgetch(WINDOW *win), int mvgetch(int y, int x)
//     	   		    		  , int mvwgetch(WINDOW *win, int y, int x) 
//         - read a character from the window.
//	   - in no delay mode, if not pinput is waiting, the value ERR is returned.
//	   - in delay mode, the program waits until the system passes text through to
//	     the program.
//	   - This happens after one character in cbreak mode, or after the first 
//	     newline in nocbreak mode.
//	   - in half-delay mode, the program waits until a character is typed or the
//	     specified timeout has been reached
//	   - Returns an error if the window pointer is null, or if its timer
//	     expires without having any data.
//	   - returns intval of key inputed
//	   - These all start in echo mode under these conditions
//	         *) the character is the current erase character, left arrow, or
//		    backspace, the cursor is moved one space to the left and that
//		    screen position is erased if delch had been called.  If the
//		    character value is any other KEY_ define, the user is alerted with
//		    a beep call, otherwise the characer is output to the screen.
//         	 *) If the window is not a pad, and it has been moved or modified since
//		    the last call to wrefresh(), wrefresh will be called before another
//		    character is read.
//		 *) If keypad is TRUE, and a function key is pressed, the token for
//		    that function key is returned instead of the raw characters.
//		    Possible funciton keys are defined in <curses.h> as macros with
//		    values outside the range of 8-bit characters who names begin with
//		    KEY_. Thus, a variable intended to hold the return value of a
//		    function key must be of short size or larger.
//	   	 *) Curses sets a timer when a character that could be the beginning
//		    of a function key is received. if the remainder of the sequence
//		    does not come in within the designated time, the character is
//		    passed through. Otherwise, the function key value is returned.
//		    This is the reason for many terminals experiencing a delay
//		    between the time a user presses the escape key and the escape 
//		    is returned to the program.
//
//     int ungetch()
//         - places ch back onto the input queue to be returned by the next call to
//	     wgetch. 
//	   - returns an error if there is no more room in the queue
//		 
//     int mvwgetch(WINDOW *win, int y, int x), int ungetch(int ch, int has_key(int ch)
//         - starts in echo mode
//
//     int intrflush(WINDOW *win, bool bf)
//         - if enabled (bf is TRUE), when an interrupt key is pressed on the
//	     keyboard (i.e interrupr, break, quit) all other output in the
//	     tty driver queue will be flushed.  This creates the effect
//	     of faster response to the interrupt.  However, it causes
//	     curses to be unsure of what is on the screen.
//	   - Disabling (bf is FALSE) the option prevents the flush.
//	   - The default for the option is inherited from the tty driver 
//	     settings.
//	   - The window argument is ignored.
//
//     int keypad(WINDOW *win, bool bf)
//         - enables the keypad for the user's terminal.  
//	   - If enabled(bf is TRUE), the user can press a function key 
//	     (such as an arrow key) and wgetch() returns a single value 
//	     representing the functionkey, as in KEY_LEFT. 
//	   - If disabled (bf is FALSE), curses does not treat function keys
//	     specially and the program has to interpret the escape sequences
//	     itself.
//	   - If the keypad in the terminal can be turned on (made to transmit)
//	     and off (made to work locally), turning on this option causes
//	     the terminal keypad to be turned on when wgetch is called
//	   - the default value for keypad is false.
//
//     int nodelay(WINDOW *win, bool bf)
//	   - causes getch() to be a non-blocking call.
//	   - if no input is ready, getch() returns ERR.  If disabled (bf is 
//	     FALSE), getch waits until a key is pressed.
//
//     int raw() or int noraw()
//         - places terminal in or out of raw mode.
//	   - Raw mode allows typed characters to immediately pass through to
//	     the user program (similar to cbreak).
//	   - The difference between raw and cbreak is in rawn mode, the
//	     interrupt, quit, suspend, and flow control characters are
//	     all passed through uninterpreted, instead of generating a
//	     signal.  
//	   - (Makes it harder to exit out of program than cbreak)
//
//     int printw(const char*fm, ..), int wprintw(WINDOW *win, const char *fmt ...)
//     int mvprintw(int y, int x, const char *fmt, ...),
//     int mvwprintw(WINDOW *win, int y, int x, const char *fmt, ...)
//         - These three routines are analogous to printf displaying messages
//	     to the screen.
//
//     int vwprintw(WINDOW *win, const char *fmt, va_list varglist);
//     int vw_printw(WINDOW *win, const char *fmt, va_list varglist)
//         - These two routines are analogous to to vprintf and perform a
//	     wprintw using a variable argument list. 
//	   - The third argument is a va+list, a pointer to a list of arguments
//	     as defined in <stdarg.h>
//
// ==== REFRESH ===============================================================
//
// ============================================================================
//
//     ** NOTE **
//         - These routines must be called to get actual output to the 
//	     terminal. Other routines only manipulate data structures.
//
//     int refresh(void), int wrefresh(WINDOW *win)
//	   - wrefresh() copies the named window to the physical terminal
//	     screen, taking into account what is already there to do 
//	     optimizations. refres() does the same using stdscr as the default
//	     window.
//	   - The physical cursor of the termianl is left at the location of the
//	     cursor for the window unless leaveok() has been enabled.
//	   - wrefresh() first calls wnoutrefresh, which copies the named window
//	     to the virtual screen, and then calling doupdate, which compares
//	     the virtual screen to the physical screen and does the actual
//	     update.  
//	   - If the win argument to wrefresh() is the global variable curscr,
//	     the screen is immediately cleared and repainted from scratch.
//
//     int wnoutrefresh(WINDOW *win), int doupdate(void)
//         - These routines allow multiple updates with more efficiency than
//	     wrefresh alone.
//	   - 
//         - By first calling wnoutrefresh() for each window, it is then 
//	     possible to call doupdate once, resulting in only one burst of 
//	     output, with fewer total characters transmitted and less CPU time 
//	     used.
//	   
//     int redrawwin(WINDOW *win), int wredrawin(WINDOW *win, int beg_Line, 
//     	   		    	       			    , int num_lines)
//         - wredrawin() indicates to curses that some screen lines are
//	     corrupted and should be thrown away before anything is written
//	     over them.  It touches the indicated lines (marking them changed).
//	   - redrawwin() touches the entire window.
//
//
// ==== ATTRIBUTES ====================================================
//
// ============================================================================
//
//     int attron(int attrs), int attroff(int attrs)
//     	   	      	    , int wattroff(WINDOW *win, int attrs)
//			    , int wattron(WINDOW *win, attrs)
//			    , int attrset(int attrs)
//			    , int wattrset(WINDOW *win, int attrs)
//         - 
//	
//     int color_set(short color_pair_number, void* opts)
//     int wcolor_set(WINDOW *win, short color_pair_number, void* opts)
//         - color_set() sets the current color of the given window to the
//	     foreground/background combination described by the 
//	     color_pair_number.
//         - The parameter "opts" is reserved for future use, applications
//	     MUST supply a null pointer.
//
//     int standend(void), int wstanded(WINDOW *win), int standout(void)
//     	   		       		       	  , int wstandout(WINDOW *win)
//         - 
//     int attr_get(attr_t *attrs, short *pair, void *opts)
//     int wattr_get(WINDOW *win, attr_t *attrs, short *pair, void *opts)
//     int attr_off(attr_t attrs, void *opts)
//     int wattr_off(attr_t attrs, void *opts)
//     int atrr_on(attr_t attrs, void *opts)
//     int wattr_on(WINDOW *win, attr_t attrs, void *opts)
//     int attr_set(attr_t attrs, short pair, void *opts)
//     int wattr_set(WINDOW *win, attr_t attrs, short pair, void *opts)
//         - attr_set() sets the current attributes of the given window to
//	     attrs.
//	   - attroff() turns off the named attributes without turning any other
//	     attributes on or off.
//	   - attron() turns on the named attributes without affecting any others
//	   - standout() is the same as attron(A_STANDOUT).
//	   - standend() is the same as attrset(A_NORMAL) or attrset(0). Likewise, 
//	     it turns off all attributes.
//	   - attrset() and related routines do not affect the attributes used
//	     when erasing portions of the window. (bkgd(3NCURSES) functions do)
//	   - wattr_get() returns the current attribute and color pair for the 
//	     given window
//	   - attr_get returns the current attribute and color pair for stdscr.
//	   - The remaining attr_*() functions operate exactly like the
//	     the corresponding attr*() functions, except that they take 
//	     arguments of type attr_t rather than int.
//
//     int chgat(int n, attr_t attr, short color, const void *opts)
//     int wchgat(WINDOW *win, int n, attr_t attr, short color
//     	   		       	      	     	   , const void *opts)
//     int mvchgat(int y, int x, int n, attr_t attr, short color
//     	   	       	      	     	       	   , const void *opts)
//     int mvwchgat(WINDOW *win, int y, int x, int n, attr_t attr, 
//     	   		   	     	       	    , short color
//					            , const void *opts)
//         -						    
//						    
//
// ==== COLOR =================================================================
//     
// ============================================================================
//     int start_color(void);
//         - requires no arguments.  Must be called if to use colors. I.e,
//	     before any other color manipulation routine is called. 
//	   - It is good practice to call this routine right after initscr().
//	   - initializes 8 basic colors including black, red, green, yellow,
//	     blue, magenta, cyan, and white.
//	   - Two global variables are also initialized, COLORS and COLOR_PAIRS
//	   - These global variables define the maximum number of colors and
//	     color-pairs the terminal can support.
//	   - start_color() also restores the colors on the terminal to the
//	     values they had when the terminal was just turned on.
//	   
//     int init_pair(short pair, short f, short b);
//         - changes the definition of a color-pair.
//	   - If the color-pair was previously initialized, the screen is
//	     refreshed and all occurrences of that color-pair are changed
//	     to the new definition.
//	   - 3 Arguments:
//	         1) The number of the color-pair to be changed.  It must be
//		    between 1 and COLOR_PAIRS-1, except that if default colors
//		    are used (use_default_colors, -1) the upper limit is 
//		    adjusted to allow for extra pairs which use a default color 
//		    in foreground and/or background.
//
//	         2) The foreground color number.  Must be between 0 and COLORS.
//		    Color pair 0 is assumed to be white on black, but is
//		    actually whatever the terminal implements before color is
//		    initialized.  It cannot be modified by the application.
//		    The third argument is this same as two.
//		    		   
//     int init_color(short color, short r, short g, short b);
//         - changes the definition of a color.
//	   - When init_color() is used, all occurrences of that color on the
//	     screen immediately change to the new definition.
//	   - 4 Arguments:
//	         1) The number of the color to be changed followed by three
//		    RGB values.  The value of the first argument must be
//		    between 0 and COLORS.  
//		 2, 3, & 4) Each of the last three arguments must be a value 
//		       	    between 0 and 1000. 
//
//     bool has_colors(void);
//         - Returns true if the terminal can manipulate colors, false otherw.
//	   - Commonly used to decide whether to use color or some other
//	     video attribute.
//
//     bool can_change_color(void);
//         - Requires no arguments.  Returns true if the terminal supports
//	     colors.
//
//     int color_content(short color, short *r, short *g, short *b);
//         - Allows programmers a way to find the intensity of RGB components
//	     in a color.  4 Arguments...
//
//     int pair_content(short pair, short *f, short *b);
//         - Allows the programmer to find out what colors a given color-pair
//	     consists of.  3 Arguments...
//
// ==== TERMINAL/SCREEN INFORMATION ==========================================
// 
// ===========================================================================
//
//     ** All of the Following Interfaces are Macros **
//
//     void getyx(WINDOW *win, int y, int x);
//         - uses the current cursor position of the current window as
//	     arguments for the y and x parameters.
//	     
//     void getparyx(WINDOW *win, int y, int x);
//         - if win is a subwindow, this macro places the beginning coordinates
//	     of the subwindow relative to the parent window into two integer
//	     variables y and x.  Otherwise, -1 is placed into y and x.
//
//     void getbegyx(WINDOW *win, int y, int x);
//     	   - stores the current beginning coordinates and size of the specified
//	     window.
//
//     void getmaxyx(WINDOW *win, int y, int x);
//         - stores the current beginning coordinates and size of the specified
//	     window.
//
// ==== BOX ===================================================================
//
// ============================================================================
//
//       int border(chtype ls, chtype rs, chtype ts, chtype bs,
//          chtype tl, chtype tr, chtype bl, chtype br);
//       int wborder(WINDOW *win, chtype ls, chtype rs,
//          chtype ts, chtype bs, chtype tl, chtype tr,
//          chtype bl, chtype br);
//       int box(WINDOW *win, chtype verch, chtype horch);
//       int hline(chtype ch, int n);
//       int whline(WINDOW *win, chtype ch, int n);
//       int vline(chtype ch, int n);
//       int wvline(WINDOW *win, chtype ch, int n);
//       int mvhline(int y, int x, chtype ch, int n);
//       int mvwhline(WINDOW *, int y, int x, chtype ch, int n);
//       int mvvline(int y, int x, chtype ch, int n);
//       int mvwvline(WINDOW *, int y, int x, chtype ch, int n);
//
// ============================================================================
